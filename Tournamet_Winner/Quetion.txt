Tournament Winner

There's no algorithm tournament taking place in which teams of 
programmers compete against each other to solve algorithmic problems 
as fast as possible. Teams compete in a round Robin, where each team 
faces off against all other teams. Only two teams compete against 
each other at a time, and for each competition one team is designated 
the home team while the other team is away. In each competition there 
is always one winner and one loser, There are no ties. A team 
receives 3 points if it wins and 0 points if it loses. The winner of 
the tournament is the team that receives the most points.

Given an array of pairs representing the team that have competed 
against each other and an array containing the result of each 
completion, write a function that return the winners of the 
tournament. The input array are named competitions and result 
respectively. The competitions array has elements in the form of 
[homeTeam, awayTeam], where each team is a string of at most 30 
characters representing the name of the team. The results 
array contains information about the winner of each competition in 
the competitions array. Specifically , results[i] denotes the 
winner of competitions[i], where a 1 in the results array means 
that the home team in the corresponding competition won and a 0 
means that the away team won.

It guaranteed that exactly one team will win the tournament and that 
each team will complete a compete against all other teams exactly 
once. It's also guaranteed that the tournament will always have at 
least two teams.

Example:
competitions = [
    ["HTML", "C#"],
    ["C#", "Python"],
    ["Python", "HTML"]
  ]
  results": [0, 0, 1]

Solution:
--> Python

// C# beats HTML, Python Beats C#, and Python Beats HTML
// HTML -> 0 points
// C# -> 3 points
// Python -> 6 points


Optimal space and time complexity:
O(n) time and O(k) space, where n is the numer of competitions 
and k is the number of teams.